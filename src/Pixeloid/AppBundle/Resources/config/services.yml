services:

  pixeloid_app.form.eventRegistration:
    class: Pixeloid\AppBundle\Form\EventRegistrationType
    tags:
      - { name: form.type, alias: eventRegistration }

  pixeloid_app.flow.eventRegistration:
    class: Pixeloid\AppBundle\Form\EventRegistrationFlow
    parent: craue.form.flow
    public: true
  # pixeloid_app.datatable.eventregistration:
  #     class: Pixeloid\AppBundle\Datatables\EventRegistrationDatatable
  #     parent: sg_datatables.datatable.abstract

  # pixeloid_app.datatable.shortlist:
  #     class: Pixeloid\AppBundle\Datatables\ShortlistDatatable
  #     parent: sg_datatables.datatable.abstract

  pixeloid_app.twig_extension:
      class: Pixeloid\AppBundle\Twig\AppExtension
      public: false
      tags:
          - { name: twig.extension }

  pixeloid_app.fosub.user_provider:
      class:        Pixeloid\AppBundle\Security\User\Provider\OAuthUserProvider
      arguments: ['@fos_user.user_manager', { facebook: facebook_id }]




  pixeloid_app.menu_builder:
    class: Pixeloid\AppBundle\Menu\Builder
    arguments: ["@knp_menu.factory"]
    calls:
      - [ setContainer, ["@service_container"] ]

  pixeloid_app.main_menu:
    class: Knp\Menu\MenuItem # the service definition requires setting the class
    factory: ["@pixeloid_app.menu_builder", mainMenu]
    arguments: ["@request_stack"]
    tags:
        - { name: knp_menu.menu, alias: main } # The alias is what is used to retrieve the menu



  pixeloid_app.secondary_menu:
    class: Knp\Menu\MenuItem # the service definition requires setting the class
    factory: ["@pixeloid_app.menu_builder", secondaryMenu]
    arguments: ["@request_stack"]
    tags:        
      - { name: knp_menu.menu, alias: secondary } # The alias is what is used to retrieve the menu
    



  pixeloid_app.top_menu:
    class: Knp\Menu\MenuItem # the service definition requires setting the class
    factory: ["@pixeloid_app.menu_builder", topMenu]
    arguments: ["@request_stack"]
    tags:        
      - { name: knp_menu.menu, alias: top } # The alias is what is used to retrieve the menu

  pixeloid_app.admin.event_registration:
      class: Pixeloid\AppBundle\Admin\EventRegistrationAdmin
      arguments: [~, Pixeloid\AppBundle\Entity\EventRegistration, PixeloidAppBundle:EventRegistrationAdmin]
      tags:
          - { name: sonata.admin, manager_type: orm, group: Content, label: Nevezett klipek }
      public: true

  # pixeloid_app.admin.budget_category:
  #     class: Pixeloid\AppBundle\Admin\BudgetCategoryAdmin
  #     arguments: [~, Pixeloid\AppBundle\Entity\BudgetCategory, SonataAdminBundle:CRUD]
  #     tags:
  #         - { name: sonata.admin, manager_type: orm, group: admin, label: BudgetCategory }
  #     public: true

  # pixeloid_app.admin.event_registration_category:
  #     class: Pixeloid\AppBundle\Admin\EventRegistrationCategoryAdmin
  #     arguments: [~, Pixeloid\AppBundle\Entity\EventRegistrationCategory, SonataAdminBundle:CRUD]
  #     tags:
  #         - { name: sonata.admin, manager_type: orm, group: admin, label: EventRegistrationCategory }
  #     public: true

  # pixeloid_app.admin.movie_category:
  #     class: Pixeloid\AppBundle\Admin\MovieCategoryAdmin
  #     arguments: [~, Pixeloid\AppBundle\Entity\MovieCategory, SonataAdminBundle:CRUD]
  #     tags:
  #         - { name: sonata.admin, manager_type: orm, group: admin, label: MovieCategory }
  #     public: true

  # pixeloid_app.admin.user:
  #     class: Pixeloid\AppBundle\Admin\UserAdmin
  #     arguments: [~, Pixeloid\AppBundle\Entity\User, SonataAdminBundle:CRUD]
  #     tags:
  #         - { name: sonata.admin, manager_type: orm, group: admin, label: User }
  #     public: true
