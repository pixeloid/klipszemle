# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.menu_builder:
        class: App\Menu\Builder
        arguments: ["@knp_menu.factory"]

    app.main_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: ["@app.menu_builder", createMainMenu]
        arguments: ["@request_stack"]
        tags:
            - { name: knp_menu.menu, alias: main } # The alias is what is used to retrieve the menu
    app.top_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: ["@app.menu_builder", createTopMenu]
        arguments: ["@request_stack"]
        tags:
            - { name: knp_menu.menu, alias: top } # The alias is what is used to retrieve the menu

    app.secondary_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: ["@app.menu_builder", createSecondaryMenu]
        arguments: ["@request_stack"]
        tags:
            - { name: knp_menu.menu, alias: secondary } # The alias is what is used to retrieve the menu


    pixeloid_app.admin.event_registration:
        class: App\Admin\EventRegistrationAdmin
        arguments: [~, App\Entity\EventRegistration, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Nevezett klipek }
        public: true

    pixeloid_app.admin.budget_category:
        class: App\Admin\BudgetCategoryAdmin
        arguments: [~, App\Entity\BudgetCategory, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Budget }
        public: true

    pixeloid_app.admin.event_registration_category:
        class: App\Admin\EventRegistrationCategoryAdmin
        arguments: [~, App\Entity\EventRegistrationCategory, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Kategória-Klip }
        public: true


    # pixeloid_app.admin.user:
    #     class: App\Admin\UserAdmin
    #     arguments: [~, App\Entity\User, SonataAdminBundle:CRUD]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: Tartalom, label: User }
    #     public: true


    pixeloid_app.admin.movie_category:
        class: App\Admin\MovieCategoryAdmin
        arguments: [~, App\Entity\MovieCategory, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Kategóriák }
        public: true

    # pixeloid_app.admin.event_registration_category:
    #     class: App\Admin\EventRegistrationCategoryAdmin
    #     arguments: [~, App\Entity\EventRegistrationCategory, SonataAdminBundle:CRUD]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: Tartalom, label: EventRegistrationCategory }
    #     public: true

    # pixeloid_app.admin.keyword:
    #     class: App\Admin\KeywordAdmin
    #     arguments: [~, App\Entity\Keyword, SonataAdminBundle:CRUD]
    #     tags:
    #         - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Keyword }
    #     public: true

    pixeloid_app.admin.hero:
        class: App\Admin\HeroAdmin
        arguments: [~, App\Entity\Hero, Sonata\AdminBundle\Controller\CRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Hero }
        public: true

    pixeloid_app.admin.jury:
        class: App\Admin\JuryAdmin
        arguments: [~, App\Entity\Jury, Sonata\AdminBundle\Controller\CRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Zsűri }
        public: true

    pixeloid_app.admin.sponsor:
        class: App\Admin\SponsorAdmin
        arguments: [~, App\Entity\Sponsor, Sonata\AdminBundle\Controller\CRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Támogatók }
        public: true

    pixeloid_app.admin.post:
        class: App\Admin\PostAdmin
        arguments: [~, App\Entity\Post, Sonata\AdminBundle\Controller\CRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Cikkek }
        public: true

    pixeloid_app.admin.program:
        class: App\Admin\ProgramAdmin
        arguments: [~, App\Entity\Program, Sonata\AdminBundle\Controller\CRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Program }
        public: true
    pixeloid_app.admin.user_title:
        class: App\Admin\UserTitleAdmin
        arguments: [~, App\Entity\UserTitle, Sonata\AdminBundle\Controller\CRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: Tartalom, label: Jogcím }
        public: true
